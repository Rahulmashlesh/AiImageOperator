package v1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// ImageSpec defines the desired state of Image
type ImageSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// Prompt is the text input used to generate the image.
	// Constraints: Range: 0 ▶ 1000 characters.
	Prompt string `json:"prompt"`

	StorageSpec StorageSpec `json:"storageSpec,omitempty"`

	//TODO: add model, format ...
}

// ImageStatus defines the observed state of Image
type ImageStatus struct {
	// TODO: remove this
	// Phase denotes the phase of the image generation process,
	// Valid phases are NotQueued, Queued, In-progress and Completed.
	//Phase ImagePhase `json:"phase,omitempty"`

	// Seed is a unique image seed number. If not provided, the image will be random.
	// An unsigned 32-bit integer seed used to control the generator randomness.
	// Reusing the same seed with the same parameters will produce the same image.
	// Constraints: Range: 0 ▶ 4294967295
	Seed string `json:"seed,omitempty"`

	// File contains the Image file generated by the AI model.
	// default format is PNG.
	File string `json:"file,omitempty"`

	// FilePath contains the path to the output image file.
	FilePath string `json:"filePath,omitempty"`
}

/*
// Phase denotes the phase of the image generation process,
// Valid phases are Queued, In-progress and Completed.
// +kubebuilder:validation:Enum=Queued;In-Progress;Completed
type ImagePhase string

// TODO: move to conditions in the future.
// ImagePhases for SiteNodeBackup custom resources
const (
	ImagePhaseNotQueued  ImagePhase = "NotQueued"
	ImagePhaseQueued     ImagePhase = "Queued"
	ImagePhaseInProgress ImagePhase = "In-Progress"
	ImagePhaseCompleted  ImagePhase = "Completed"
)

// ImagePhases is a slice of all ImagePhases
var ImagePhases = []ImagePhase{
	ImagePhaseNotQueued,
	ImagePhaseQueued,
	ImagePhaseInProgress,
	ImagePhaseCompleted,
}*/

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// Image is the Schema for the images API
type Image struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ImageSpec   `json:"spec,omitempty"`
	Status ImageStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// ImageList contains a list of Image
type ImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Image `json:"items"`
}

type StorageSpec struct {
	Size             string                              `json:"size"`
	AccessModes      []corev1.PersistentVolumeAccessMode `json:"accessModes"`
	StorageClassName string                              `json:"storageClassName,omitempty"`
}

func init() {
	SchemeBuilder.Register(&Image{}, &ImageList{})
}
